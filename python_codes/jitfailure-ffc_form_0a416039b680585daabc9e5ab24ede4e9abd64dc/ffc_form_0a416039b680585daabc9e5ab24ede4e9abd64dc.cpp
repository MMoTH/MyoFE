// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.post2.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   no-evaluate_basis_derivatives:  True
//   optimize:                       True
//   precision:                      None
//   quadrature_degree:              2
//   quadrature_rule:                None
//   representation:                 'uflacs'
//   split:                          False

#include "ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise::ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise::~ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          True
    //   precision:         16
    //   quadrature_degree: 2
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 4
    //   optimize:                    True
    //   precision:                   16
    //   quadrature_degree:           2
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q4[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q4[0][0][1];
    alignas(32) double sp[15];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::abs(sp[13]);
    alignas(32) double BF0[4][4] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        const double fw0 = sp[14] * weights4[iq];
        alignas(32) double TF0[4];
        for (int iq = 0; iq < 4; ++iq)
            TF0[iq] = fw0 * FE11_C0_Q4[0][iq][iq];
        BF0[iq][iq] += TF0[iq] * FE11_C0_Q4[0][iq][iq];
    }
    std::fill(&A[0], &A[16], 0.0);
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[4 * i + j] += BF0[i][j];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise()
{
  return new ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise();
}


ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::~ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main()
{
    // Do nothing
}

const char * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::signature() const
{
    return "81033f9e1d6d1f588803d82aa4f99f71a4a50397594c67586387a29dc2de372d5f834e433c830269f61010555b45c6919a29206685fb7476fe50cbfa4220ab08";
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::rank() const
{
    return 2;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::num_coefficients() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({});
    return position[i];
}

ufc::finite_element * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_29d9b88a054b49a8dd9dcd05ff9f6aa6317d8e13_finite_element_main();
}

ufc::dofmap * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_29d9b88a054b49a8dd9dcd05ff9f6aa6317d8e13_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return create_ffc_element_56537ff3a8fbee9e71eafcb675c830ec641c2014_finite_element_main();
        break;
      }
    case 1:
      {
        return create_ffc_element_56537ff3a8fbee9e71eafcb675c830ec641c2014_finite_element_main();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return create_ffc_element_56537ff3a8fbee9e71eafcb675c830ec641c2014_dofmap_main();
        break;
      }
    case 1:
      {
        return create_ffc_element_56537ff3a8fbee9e71eafcb675c830ec641c2014_dofmap_main();
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_cell_integral() const
{
    return new ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main::create_default_overlap_integral() const
{
    return 0;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main()
{
  return new ffc_form_0a416039b680585daabc9e5ab24ede4e9abd64dc_form_main();
}

